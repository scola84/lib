{
  "queue-handler": {
    "body": [
      "import type { QueueHandlerOptions, QueueTask } from '@scola/lib'",
      "import { QueueHandler } from '@scola/lib'",
      "import Schema from 'fluent-json-schema'",
      "",
      "interface Options {",
      "",
      "}",
      "",
      "interface Payload {",
      "",
      "}",
      "",
      "interface Result {",
      "",
      "}",
      "",
      "export interface ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}HandlerOptions extends Partial<QueueHandlerOptions> {",
      "",
      "}",
      "",
      "export class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Handler extends QueueHandler {",
      "  public schema = {",
      "    payload: Schema",
      "      .object()",
      "  }",
      "",
      "  public constructor (options: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}HandlerOptions) {",
      "    super(options)",
      "  }",
      "",
      "  public async handle (task: QueueTask<Payload, Options, Result>): Promise<void> {",
      "    $0",
      "  }",
      "}",
      ""
    ],
    "description": "QueueHandler",
    "prefix": "queue-handler",
    "scope": "typescript"
  },
  "route-handler": {
    "body": [
      "import type { IncomingMessage, ServerResponse } from 'http'",
      "import type { RouteData, RouteHandlerOptions } from '@scola/lib'",
      "import { RouteHandler } from '@scola/lib'",
      "",
      "interface ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data extends RouteData {",
      "",
      "}",
      "",
      "export interface ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}HandlerOptions extends Partial<RouteHandlerOptions> {",
      "",
      "}",
      "",
      "export class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Handler extends RouteHandler {",
      "  public constructor (options: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}HandlerOptions) {",
      "    super(options)",
      "  }",
      "",
      "  protected async handle (data: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data, response: ServerResponse, request: IncomingMessage): Promise<void> {",
      "    $0",
      "  }",
      "}"
    ],
    "description": "RouteHandler",
    "prefix": "route-handler",
    "scope": "typescript"
  }
}
